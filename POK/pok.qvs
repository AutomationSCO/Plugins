
$(Must_Include=[lib://Geo_AMS/Automation/BI/Plugins/0. Main_unlock.qvs]);
$(Must_Include=[lib://Geo_AMS/Automation/BI/Plugins/0.1 Main geo_bi.qvs]);

[warehouse_us]:
noconcatenate
LOAD
    "Inv Number" as warehouse_inv_number,
    "Billing Date" as warehouse_billing_date,
    "Sales Ord" as warehouse_sales_ord,
    COATS  as warehouse_coats,
    Material as warehouse_material,
    Qty as warehouse_qty,
    "Case Num" as warehouse_case_num,
    cases as warehouse_cases,
    Amount as warehouse_amount,
    "Tracking #" as warehouse_tracking,
    "Gross Wght" as warehouse_gross_weight,
    "Weight unit" as warehouse_weight_unit,
    "Volumetric Wght" as warehouse_volumetric_weight,
    "Vendor Name" as warehouse_vendor_name,
    Incoterms as warehouse_incoterms,
    "Ship To" as warehouse_ship_to,
    "Inv To" as warehouse_inv_to,
    Cntry as warehouse_country,
    "GI Date" as warehouse_gi_date,
    PSSD as warehouse_pssd,
    CAD as warehouse_cad,
    Plant as warehouse_plant,
    "Shipping Point/Receiving Pt" as warehouse_shipping_point,
    "PGI Doc" as warehouse_pgi_doc,
    Description as warehouse_description,
    City as warehouse_city,
    HazMat as warehouse_hazmat
FROM [lib://Geo_AMS/LogisticsAnalyst/Warehouse_US/Shipped GDL to POK.xlsx]
(ooxml, embedded labels, table is [Shipped from GDL]);


sap:
LOAD
    "Inv Number" as sap_inv_number,
    "Inv Type" as sap_inv_tpe,
    "GI Date" as sap_billing_date,
    year("GI Date") as sap_billing_year,
    year("GI Date") &'-'& num(month("GI Date"),'00')   as sap_billing_yearmonth,
    year("GI Date") &'-'& num(week("GI Date"),'00')   as sap_billing_yearweek,
    if(MonthEnd("GI Date") = date("GI Date"),'Last Day of the Month',
    if(day("GI Date") <= 15, '1 to 15th',
        if(day("GI Date") <= 28, '16 to End of Month', 'Last 3 Days of the Month'))) as sap_billing_day_bracket,
    "Sales Ord" as sap_sale_ord,
    COATS as sap_coat,
    Material as sap_material,
    Model as sap_model,
    Qty as sap_qty,
    "Case Num" as sale_HU_case_number,
    cases as sap_cases,
    HAWB as sap_hawb,
    if("Weight unit" = 'KG',"Gross Wght" * 2.204, "Gross Wght") as sap_gross_weight,
    "Weight unit" as sap_weight_unit,
    "Length" as sap_length,
    Width as sap_width,
    Height as sap_height,
    "Volumetric Wght" as sap_volumetric_weight,
    "Vendor Name" as sap_vendor_name,
    Incoterms as sap_incoterms,
    "Ship To" as sap_ship_to,
    "Inv To" as sap_inv_to,
    Cntry as sap_country,
    "GI Date" as sap_gi_date,
    "Country Name" as sap_country_name,
    "Shipping Point/Receiving Pt" as sap_shipping_point,
    HazMat as sap_hazmat,
    MFGNO as sap_mfgno,
    'sap' as sap_info_type,
    Product as sap_product,
    Client as sap_client
FROM [lib://Geo_AMS/POK_WH/POK shipments updated.xlsx]
(ooxml, embedded labels, table is Sheet1)
where match(year("GI Date"),'$(vCurrentYear)','$(vPastyear)','$(vPastPastyear)');


concatenate(sap)
LOAD
    "Shipment number" as sale_HU_case_number,
    "Delivery Number" as sap_sale_ord,
    "Material number" as sap_material_number,
    Quantity as sap_qty,
    //"Date of delivery creation",
    "Date of goods issue" as sap_billing_date,
    'IBM' as sap_client,

    year("Date of goods issue") as sap_billing_year,
    year("Date of goods issue") &'-'& num(month("Date of goods issue"),'00')   as sap_billing_yearmonth,
    year("Date of goods issue") &'-'& num(week("Date of goods issue"),'00')   as sap_billing_yearweek,
    if(MonthEnd("Date of goods issue") = date("Date of goods issue"),'Last Day of the Month',
    if(day("Date of goods issue") <= 15, '1 to 15th',
        if(day("Date of goods issue") <= 28, '16 to End of Month', 'Last 3 Days of the Month'))) as sap_billing_day_bracket,



    //"Shipment status date",
    "Carrier Number"as sap_vendor_name,
    "BOL number" as sap_bol_number,
    "BOL number" as sap_hawb,
    "Ship to code" as sap_ship_to_code,
    Route as sap_route,
    'EP1' as sap_info_type
FROM [lib://Geo_AMS/POK_WH/EP1 shipments.xlsx]
(ooxml, embedded labels, table is ep1shps)
where match(year("Date of goods issue"),'$(vCurrentYear)','$(vPastyear)','$(vPastPastyear)');

gars:
concatenate(sap)
LOAD
    "Sales Ord." as sap_sale_ord,
    "Ord cnt" as sap_ord_cnt,
    'IBM' as sap_client,
    //"Customer (Sold to)",
    "Customer (Ship to)"as sap_ship_to_code,
    //"PO number",
    "Ship Point" as sap_shipping_point,
    Route as sap_route,
    //"Stor. Loc.",
    //"Order Qty",
    //DelivBlock,
    Delivery as sap_delivery,
    Pallet + Rack as sap_qty,
    if(len(trim(Pallet)) <> 0 and Pallet <> 0 and len(trim(Rack)) <> 0 and Rack <> 0 ,'Both',
        if(len(trim(Pallet)) <> 0 and Pallet <> 0 ,'Pallet',
            if(len(trim(Rack)) <> 0 and Rack <> 0 ,'Rack'))) as sap_material_type,
    DelBndlInd as sap_delbndind,
    Pallet as sap_pallet_qty,
    Rack as sap_rack_qty,
    //"Delv Qty",
    //"Pick",
    //Pack,
    //Issue,
    date("Ship date") as sap_ship_date,
    year("Ship date") as sap_ship_year,
    year("Ship date") &'-'& num(month("Ship date"),'00')   as sap_ship_yearmonth,
    year("Ship date") &'-'& num(week("Ship date"),'00')   as sap_ship_yearweek,
    year("Ship date") as sap_billing_year,
    date("Ship date") as sap_billing_date,

    if(MonthEnd("Ship date") = date("Ship date"),'Last Day of the Month',
    if(day("Ship date") <= 15, '1 to 15th',
        if(day("Ship date") <= 28, '16 to End of Month', 'Last 3 Days of the Month'))) as sap_billing_day_bracket,
    //"Age",
    'gars' as sap_info_type,
    ShpmtTrkId as sap_shpmetrkid
    //"Totl Shipd",
    //"Rem Ship",
    //"IERP Sold to customer"

FROM [lib://Geo_AMS/POK_WH/Gars shipments.xlsx]
(ooxml, embedded labels, table is Sheet1)
where match(year("Ship date"),'$(vCurrentYear)','$(vPastyear)','$(vPastPastyear)')
;

gars_items:
load
    "Sales Ord." as sap_sale_ord,
    Pallet as gars_items_qty,
    'Pallet' as gars_item_type

FROM [lib://Geo_AMS/POK_WH/Gars shipments.xlsx]
(ooxml, embedded labels, table is Sheet1);

gars_items:
concatenate(gars_items)
load
    "Sales Ord." as sap_sale_ord,
    Rack as gars_items_qty,
    'Rack' as gars_item_type
    
FROM [lib://Geo_AMS/POK_WH/Gars shipments.xlsx]
(ooxml, embedded labels, table is Sheet1);



left join(sap)
LOAD
    country as sap_country,
    Geo_Code as sap_geo
FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_REF_country.qvd]
(qvd) ;

hu_items:
left Keep(sap)
LOAD
    //sale_service_id,
    if(isnull(sale_hu_case_id),'',sale_hu_case_id) as sale_HU_case_number,
    sale_final_customer_order_number as sale_COAT,
    sale_Itemum_invoice_number as sale_hu_invoice_number,
    sale_vendor_part_number as sale_part_number,
    sale_item_description,
    sale_HU_compum_internal_id as sale_hu_compum_internal_id
    
FROM [lib://SCO-BI-Common Shared Data  Row/GEOFLOW_sale_HU_compum_item.qvd]
(qvd);


[hu_compum]:
Left keep(hu_items)
LOAD
	
	sale_service_id,
	sale_hu_compum_length_m & 'x' & sale_hu_compum_height_m & 'x' & sale_hu_compum_width_m as sale_hu_LxHxW_M3,
    sale_hu_compum_length_m * sale_hu_compum_height_m * sale_hu_compum_width_m as sale_hu_volume_m3,
    sale_hu_compum_length_m,
    sale_hu_compum_height_m,
    sale_hu_compum_width_m,
    sale_hu_compum_weight_unit,
    sale_hu_compum_weight_kg,
    sale_hu_compum_internal_id

FROM [lib://SCO-BI-Common Shared Data  Row/GEOFLOW_sale_HU_compum.qvd] (qvd);

Section application;
//Scope Info-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
[sale_basic_temp_1]: 
left keep(hu_compum)
LOAD Distinct
    sale_service_id,
    sale_incoterm,
    sale_service_customer_status as sale_customer_status,
    num(sale_local_amount) as sale_local_amount, 
    sale_local_currency,
    APP_Source as sale_app_source,
        if(isnull(sale_actual_end_date) or isnull(sale_actual_start_date),'Not yet calculated',networkdays(sale_actual_end_date,sale_actual_start_date)) as sale_actual_tt,
    Party_Short_Name_sale_executor_party AS sale_executor_short_name,
    if(match(Party_Short_Name_sale_executor_party,'SMXKEY','SUSKEY','SCAKEY','SARKEY','SBRKEY','SCOKEY','SCLKEY',
    'SECKEY','SUYKEY'),'AMS Bill') as sale_ams_billing,
    Party_Short_Name_sale_contractor_party AS sale_contractor_party,
    Date(If(IsNull(sale_actual_end_date), sale_planned_end_date_before, sale_actual_end_date)) AS sale_service_end_date,
    SubField(sale_start_zone, '-', 1) AS sale_start_state,
    SubField(sale_end_zone, '-', 1) AS sale_end_state,
    sale_executed_SLA,
    if(sale_service_execution_followup='APP',sale_planned_start_date_before,sale_actual_start_date) as sale_start_date,
	if(sale_service_execution_followup<>'CL',sale_planned_end_date_before,sale_actual_end_date) as sale_end_date,
    sale_service_execution_followup,
    sale_service_short_name,
    sale_service_type,
    sale_start_country,
    sale_start_zone as sale_start_zip_code,
    sale_start_city,
    upper(sale_start_city) &','&sale_start_country as sale_start_city_country,
    upper(sale_end_city) &','&sale_end_country as sale_end_city_country,
    sale_service_start_address,
    sale_service_start_name,
    sale_end_country,
    sale_end_zone as sale_end_zip_code,
    sale_end_city,
    sale_service_end_address,
    sale_service_end_name,
    sale_creation_date,
    sale_creation_datetime,
    sale_service_nature,
    sale_volume_m3,
    sale_contractor_party_Group_N1,
    num(sale_weight_kg,'# ###.000','.',' ') as sale_weight_kg,
    num(sale_weight_kg,'# ###.000','.',' ') * 2.204 as sale_weight_lb,

    sale_service_invoice_bursting as sale_invoice_bursting,
    year(sale_creation_date) &'-'& num(month(sale_creation_date),'00') as sale_creation_yearmonth,
    year(sale_creation_date) &'-'& num(Week(sale_creation_date,0,0),'00') as sale_creation_yearweek,

    num(Week(sale_creation_date,0,0),'00') as sale_creation_week,
    num(month(sale_creation_date),'00') as sale_creation_month,
    year(sale_creation_date) as sale_creation_year,   
    sale_planned_start_date_before as sale_planned_start_date,
    sale_planned_start_date_after as sale_planned_start_date_after,
    sale_actual_start_date,
    num(month(sale_actual_start_date)) as sale_actual_start_month,
    num(week(sale_actual_start_date,0,0),'00') as sale_actual_start_week,

    year(sale_actual_start_date) as sale_actual_start_year,
    year(sale_actual_start_date) &'-'& num(week(sale_actual_start_date,0,0),'00') as sale_actual_start_yearweek,
    year(sale_actual_start_date) &'-'& num(month(sale_actual_start_date),'00') as sale_actual_start_yearmonth,
    sale_planned_end_date_before as sale_planned_end_date,
    sale_planned_end_date_after as sale_planned_end_date_after,
    year(sale_planned_end_date_after) & '-' & num(month(sale_planned_end_date_after),'00') as sale_planned_end_yearmonth,
    num(week(sale_actual_end_date,0,0),'00') as sale_actual_end_week,
    num(month(sale_actual_end_date)) as sale_actual_end_month,
    year(sale_actual_end_date) as sale_actual_end_year,
    year(sale_actual_end_date) &'-'& num(month(sale_actual_end_date),'00') as sale_actual_end_yearmonth,
    year(sale_actual_end_date) &'-'& num(week(sale_actual_end_date,0,0),'00') as sale_actual_end_yearweek,
    if(sale_actual_end_date > date(addmonths('$(vToday)',-12)),1,0) as sale_flag_12_months,
    sale_actual_end_date,
    sale_requested_start_date_before,
    sale_requested_start_date_after,
    sale_service_loading_number,
    sale_requested_end_date_before,
    sale_requested_end_date_after as sale_requested_end_date,
    if(match(sale_service_status,'CD','CL'),networkdays('$(vToday)',sale_planned_start_date_before)-1) as sale_days_to_pickup,
    if(networkdays(sale_requested_start_date_after,sale_requested_end_date_after)-1 <0,0,networkdays(sale_requested_start_date_after,sale_requested_end_date_after)) as sale_expected_transit_time,
    if(networkdays(sale_requested_end_date_after,sale_planned_end_date_before)-1 <0,0,networkdays(sale_requested_end_date_after,sale_planned_end_date_before)) as sale_planned_end_vs_requested_end,
    [sale_start_country] & '-' & [sale_end_country] as sale_country2country,
    [sale_start_country] & [sale_end_country] as sale_from_to_country,
    if(sale_service_nature = 'TAIR','Air', if(sale_service_nature = 'TFTL', 'Ground',if(sale_service_nature = 'TFCL', 'Ocean',sale_service_nature))) as sale_MOT,
    if(sale_service_short_name='IBM_MD_US/GSP',1,0) as sale_GSP_Flag,
    if(Match(Party_Short_Name_sale_executor_party,'SARKEY','SBRKEY','SCAKEY','SCLKEY','SCOKEY','SMXKEY','SPEKEY','SUSKEY','SVNKEY'),'AMS','Others') as sale_agency_region,
    if(wildmatch(sale_service_start_address,'*14TH AVE*'),1,0) as sale_kyndryl_wh_flag,  
    if(sale_requested_start_date_after >= '$(vTodayAMS)',1,0) as kpi_requested_today_on_time_pickup,
    if(sale_requested_end_date_after >= '$(vTodayAMS)',1,0) as kpi_requested_today_on_time_delivery,
    if(sale_requested_start_date_after >= '$(vTodayAMS)','On Time','Late') as kpi_requested_today_on_time_w_pickup,
    if(sale_requested_end_date_after >= '$(vTodayAMS)','On Time','Late') as kpi_requested_today_on_time_w_delivery,
    if(sale_requested_start_date_after < '$(vToday)',
        -(networkdays(sale_requested_start_date_after,'$(vToday)') - 1),
            (networkdays('$(vToday)',sale_requested_start_date_after)-1))
        as kpi_requested_today_days_pickup,
    if(sale_requested_end_date_after < '$(vToday)',
        -(networkdays(sale_requested_end_date_after,'$(vToday)') - 1),
            (networkdays('$(vToday)',sale_requested_end_date_after)-1))
        as kpi_requested_today_days_delivery,
    if(sale_requested_start_date_after >= sale_actual_start_date,1,0) as kpi_request_on_time_pickup,
    if(sale_requested_end_date_after >= sale_actual_end_date,1,0) as kpi_request_on_time_delivery,
    if(sale_requested_start_date_after >= sale_actual_start_date,'On Time','Late') as kpi_request_on_time_w_pickup,
    if(sale_requested_end_date_after >= sale_actual_end_date,'On Time','Late') as kpi_request_on_time_w_delivery,
    if((networkdays(sale_requested_start_date_after,sale_actual_start_date) - 1) = '-1','0',
        (networkdays(sale_requested_start_date_after,sale_actual_start_date) - 1)) as kpi_requested_days_pickup, 
     if((networkdays(sale_requested_end_date_after,sale_actual_end_date) - 1) = '-1','0',
        (networkdays(sale_requested_end_date_after,sale_actual_end_date) - 1)) as kpi_requested_days_delivery,     
    if(sale_requested_start_date_after >= sale_planned_start_date_before,1,0) as kpi_planned_request_on_time_pickup,
    if(sale_requested_start_date_after >= sale_planned_start_date_before,'On Time','Late') as kpi_planned_request_on_time_w_pickup,
    if(sale_requested_end_date_after >= sale_planned_end_date_before,1,0) as kpi_planned_request_on_time_delivery,
    if(sale_requested_end_date_after >= sale_planned_end_date_before,'On Time','Late') as kpi_planned_request_on_time_w_delivery,

    //36 37 Late Request Pickup Delivery

    if(match(sale_service_execution_followup,'APP'),
        if(match(NetWorkDays(sale_requested_start_date_before,'$(vToday)')- 1,'',0,-1),'Incorrect'))  as cp_late_request_pickup,
    
    if(match(sale_service_execution_followup,'CD','APP'),
        if(match(NetWorkDays(sale_requested_end_date_before,'$(vToday)')- 1,'',0,-1),'Incorrect'))  as cp_late_request_delivery,
    
    // 38 39 Late Creation Pickup Delivery
    if(('$(vToday)' - sale_creation_date) > 4 and sale_service_execution_followup = 'APP',1) as cp_late_creation_pickup,
    if(networkdays(sale_creation_date,'$(vToday)') > 13 and sale_service_execution_followup = 'CD',1) as cp_late_creation_delivery,
    if(sale_service_execution_followup = 'CD',networkdays(sale_creation_date,'$(vToday)')) as cp_late_creation_delivery_aging,

    if(match(sale_service_execution_followup,'APP'),NetWorkDays(sale_planned_start_date_before,'$(vToday)')- 1,'') as sale_planned_pick_up_aging,
    if(match(sale_service_execution_followup,'CD','APP'),
        if(sale_planned_end_date_before < '$(vToday)',NetWorkDays(sale_planned_end_date_before,'$(vToday)')- 1,
            - (NetWorkDays('$(vToday)',sale_planned_end_date_before)- 1))) as planned_delivery_days,

    if(isnull((sale_planned_end_date_before - sale_planned_start_date_before)),'Not yet calculated',(sale_planned_end_date_before - sale_planned_start_date_before)) as gross_planned_tt,
    if(isnull((sale_actual_end_date - sale_actual_start_date)),'Not yet calculated',((sale_actual_end_date - sale_actual_start_date))) as gross_actual_tt,
    if(Match(sale_end_country,'AI','AG','AN','AQ','AW','BB','BM','BS','BW','CW','DM','FK','GD','GL','GS','GY','JM','KN','KY','LC','MS','PR','TC','TT','UM','VC','VG','VI','SR','DO'),'Yes','No') as end_Caribbean,
    if(match(sale_end_country,'AR','BO','BR','CL','CO','EC','PY','PE','UY','VE') 
        or match(sale_start_country,'AR','BO','BR','CL','CO','EC','PY','PE','UY','VE'),'Yes','No') as latam_flag,
    If([sale_service_execution_followup] = 'APP','1. Pending Pickup',if([sale_service_execution_followup] = 'CD', '2. In Transit','3. Delivered')) as sale_status,

    NetWorkDays(sale_creation_date,sale_actual_end_date) as sale_order_life,
    sale_service_customer_reference

FROM [lib://SCO-BI-Common Shared Data  Transormed/Geoflow_Sale_Service_Transformed.qvd] (qvd)
WHERE 

    (MATCH([sale_service_execution_followup], 'APP','CD','CL','NAP')
    and (Len(Trim(sale_service_status)) >= 1)
    and (Len(Trim(sale_service_id)) >= 3)
    and match(sale_end_city,'POUGHKEEPSIE'))

or

    (MATCH([sale_service_execution_followup], 'APP','CD','CL','NAP')
    and (Len(Trim(sale_service_status)) >= 1)
    and (Len(Trim(sale_service_id)) >= 3)
    and match(sale_start_city,'POUGHKEEPSIE'))

    
;


//Geografia origen
[geo_origin_sale]:
left join ([sale_basic_temp_1])
LOAD
    country as sale_start_country,
    Geo_Code as sale_start_geo

FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_REF_country.qvd]
(qvd);


//Geofrafia destino
[geo_destination_sale]:
left join ([sale_basic_temp_1])
LOAD
    country as sale_end_country,
    Geo_Code as sale_end_geo
    
FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_REF_country.qvd]
(qvd) ;


left join(sale_basic_temp_1)
load
    cso_number as sale_service_id,
    'Out' as exclude_data_model
    
FROM [lib://Geo_AMS/LogisticsAnalyst/Plugins/SQTSCS/CP Netting.xlsx]
(ooxml, embedded labels, table is [Exclude Data Model]);

[sale_basic_temp]:
noconcatenate
LOAD Distinct
    *,
    sale_start_city &'-' & sale_end_city as sale_city2city,
    if(sale_planned_end_date < '$(vToday)' and sale_service_execution_followup = 'CD', 1,0) as sale_pre_due_del,
    
    if(planned_delivery_days < '-2', '2+ Days',
        if(planned_delivery_days = '-1', 'Tomorrow',
            if(planned_delivery_days = '0', 'Today',
                if(planned_delivery_days > '0', 'Due Delivery')))) as sale_planned_delivery_aging,


    if(sale_start_geo ='AMS' and match(sale_end_geo,'APAC','EMEA'),'Outbound',
        if(match(sale_start_geo,'APAC','EMEA') and sale_end_geo ='AMS', 'Inbound','Intra AMS')) as sale_lane,

    NetWorkDays(sale_start_date,sale_start_date) as sale_start_end_TT,
    sale_start_state&sale_end_state as sale_from_to_state,
    networkdays(sale_actual_start_date,sale_actual_end_date) as sale_pickup_difference,
    If(wildmatch(sale_service_start_name,'*RBC*'), 'RBC', 'Not RBC') as RBC_Flag,
    if(sale_creation_month = '$(vCurrentMonth)' and sale_creation_year = '$(vCurrentYear)',1,0) as sale_current_month_flag,
    if((NetWorkDays((sale_actual_start_date),(sale_actual_end_date))-1) < 0,0,(NetWorkDays((sale_actual_start_date),(sale_actual_end_date))-1)) as sale_transit_time,
    if(isnull(sale_actual_start_date),'On Going',sale_actual_end_date - sale_actual_start_date) as sale_full_transit_time,
    if(isnull(sale_actual_end_date),NetWorkDays(sale_actual_start_date,'$(vToday)')-1) as sale_current_transit_time,
    if((NetWorkDays((sale_creation_date),(sale_actual_end_date))-1) < 0,0,(NetWorkDays((sale_creation_date),(sale_actual_end_date))-1)) as sale_life_time,
    sale_start_geo & '-' & sale_end_geo as sale_geo_to_geo,

    if(kpi_requested_today_days_pickup >= 0, 'On Time',
        if(kpi_requested_today_days_pickup >= -3,'1-3 days',
            if(kpi_requested_today_days_pickup >= -4,'4-6 days','7+ days'))) as kpi_requested_today_bracket_pickup_pickup,

    if( kpi_requested_today_days_pickup < 0, 'Late',
        if( kpi_requested_today_days_pickup = 0, 'Today',
        if( kpi_requested_today_days_pickup = 1,'1 days',
            if( kpi_requested_today_days_pickup = 2,'2 days',
                if( kpi_requested_today_days_pickup = 3,'3 days','+3 days' ))))) as kpi_requested_today_bracket_internal_pickup,

    if(kpi_requested_today_days_pickup <= 0, 'On Time',
        if(kpi_requested_today_days_pickup <= 3,'1-3 days',
            if(kpi_requested_today_days_pickup <= 4,'4-6 days','7+ days'))) as kpi_requested_bracket_pickup,

        if(kpi_requested_today_days_delivery >= 0, 'On Time',
        if(kpi_requested_today_days_delivery >= -3,'1-3 days',
            if(kpi_requested_today_days_delivery >= -4,'4-6 days','7+ days'))) as kpi_requested_today_bracket_delivery,

    if( kpi_requested_today_days_delivery < 0, 'Late',
        if( kpi_requested_today_days_delivery = 0, 'Today',
        if( kpi_requested_today_days_delivery = 1,'Tomorrow',
            '+2 days' ))) as kpi_requested_today_bracket_internal_delivery,

    if(kpi_requested_today_days_delivery <= 0, 'On Time',
        if(kpi_requested_today_days_delivery <= 3,'1-3 days',
            if(kpi_requested_today_days_delivery <= 4,'4-6 days','7+ days'))) as kpi_requested_bracket_delivery,

    networkdays('$(vToday)',sale_service_end_date)-1 as kpi_planned_today_delivery_aging,
    
    if(networkdays('$(vToday)',sale_service_end_date)-1 < 0,'Due',
        if(networkdays('$(vToday)',sale_service_end_date)-1 =0, 'Today',
            if(networkdays('$(vToday)',sale_service_end_date)-1 = 1, 'Tomorrow',
                if(networkdays('$(vToday)',sale_service_end_date)-1 > 2, '2+ Days'))))
        as kpi_planned_today_delivery_bracket,

        
    if(not match(sale_from_to_country,'USUS','MXUS','MXCA','CACA','MXPR','MXGU','USPR','USGU','CAPR','CAGU','USCA','MXMX'),'Inter Team','Intra Team') as GEODIS_ops_Team, //pending US y canada es de vendors
    if(match((sale_end_geo & sale_start_geo),'APACAPAC','APACEMEA','EMEAEMEA','EMEAAPAC') and Match(sale_contractor_party,'ALIGN_US'),0,1) as Align_scope_flag,

    if(sale_weight_kg <= 100, '0-100 kgs',
        if(sale_weight_kg <= 200, '100-200 kgs',
            if(sale_weight_kg <= 300, '200-300 kgs',
                if(sale_weight_kg <= 400, '300-400 kgs',
                    if(sale_weight_kg <= 1000, '500-1000kgs',
                        if(sale_weight_kg <= 2000, '1000-2000 kgs',
                            if(sale_weight_kg <= 3000, '2000-3000 kgs',
                                if(sale_weight_kg <= 4000, '3000-4000 kgs',
                                    if(sale_weight_kg <= 10000,'5000 - 10000 kgs','+10000 kgs'))))))))) as sale_weight_bracket,
    if(sale_contractor_party_Group_N1='IBM_FIGO' or sale_contractor_party_Group_N1='IBM_NCS','IBM',
    if(sale_contractor_party_Group_N1='SOFTLYR_MD','SOFTLAYER',
    if(sale_contractor_party_Group_N1='ALIGN','ALIGN',
    if(wildmatch(sale_contractor_party,'VELOXINT*'),'VELOXINT',
    if(WildMatch(sale_contractor_party,'APEX*'),'APEX',
    if(WildMatch(sale_contractor_party,'ARROW*'),'ARROW',
    if(WildMatch(sale_contractor_party,'BROOKAY*'),'BROOKLYN KAYAK',
    if(WildMatch(sale_contractor_party,'EGYM*'),'EGYM',
    if(WildMatch(sale_contractor_party,'FADS*'),'FADS',
    if(WildMatch(sale_contractor_party,'JBI*'),'JBI',
    if(WildMatch(sale_contractor_party,'DSS*'),'DSS',
    if(WildMatch(sale_contractor_party,'DEVIALET*'),'DEVIALET',
    if(WildMatch(sale_contractor_party,'KTEK*'),'KTEK',
    if(WildMatch(sale_contractor_party,'FOOJI*'),'FOOJI',
    if(WildMatch(sale_contractor_party,'OVO*'),'OVO',
    if(WildMatch(sale_contractor_party,'PREMIER*'),'PREMIER',
    if(WildMatch(sale_contractor_party,'TECHDATA*'),'TECHDATA',
    if(WildMatch(sale_contractor_party,'THALES*'),'THALES',
    if(WildMatch(sale_contractor_party,'CITY*'),'CITY DASH',
    if(WildMatch(sale_contractor_party,'ZLINE*'),'ZLINE',
    if(WildMatch(sale_contractor_party,'JLL*'),'JLL',
    if(WildMatch(sale_contractor_party,'KEISER*'),'KEISER FITNESS',
    if(WildMatch(sale_contractor_party,'QRS*'),'QRS',
    if(WildMatch(sale_contractor_party,'LUCIANO*'),'LUCIANO',
    if(WildMatch(sale_contractor_party,'TRANSPAK*'),'TRANSPAK',
    if(WildMatch(sale_contractor_party,'MIOTECH*'),'MIOTECH',
    if(WildMatch(sale_contractor_party,'LEDLOUN*'),'LEDGE LOUNGER US',
    if(WildMatch(sale_contractor_party,'DLB*'),'DLB',
    if(WildMatch(sale_contractor_party,'ROSEN*'),'ROSEN',
    if(WildMatch(sale_contractor_party,'ALIG*'),'ALIGN',
    if(WildMatch(sale_contractor_party,'ALIGN*'),'ALIGN',
    if(WildMatch(sale_contractor_party,'TIMOTHY*'),'TIMOTHY',
    if(WildMatch(sale_contractor_party,'AMICO*'),'AMICO',
    if(WildMatch(sale_contractor_party,'PARTY*'),'PARTYCITY',
    if(WildMatch(sale_contractor_party,'KSM*'),'KSM',
    if(WildMatch(sale_contractor_party_Group_N1,'KYNDRYL*'),'KYNDRYL',
    if(WildMatch(sale_contractor_party,'LOLL*'),'LOLL',
    if(WildMatch(sale_contractor_party,'RAD*'),'RAD',
    if(WildMatch(sale_contractor_party,'AMS_KEI*'),'KEISER',
    if(WildMatch(sale_contractor_party,'WW_HI*'),'HID',
    if(WildMatch(sale_contractor_party,'TRITON*'),'TRITON',
    if(WildMatch(sale_contractor_party,'UPLN*'),'UPLAND FAB',
    if(WildMatch(sale_contractor_party,'DJI*'),'DJI',
    if(WildMatch(sale_contractor_party,'MERGE*'),'MERGE',
    if(WildMatch(sale_contractor_party,'RIMOWA*'),'RIMOWA',
    if(WildMatch(sale_contractor_party,'EXCLUSNETW*'),'EXCLUSIVE NETWORKS',
    if(WildMatch(sale_contractor_party,'MERATIVEUS*'),'MERATIVE',
    if(WildMatch(sale_contractor_party,'COMPUTACENTER*','COMPCTR_*','SCO_COMPUTACENTER*'),'COMPUTACENTER',
    if(WildMatch(sale_contractor_party,'*SOLIDIG*'),'SOLIDIGM',
    'OTHER'))))))))))))))))))))))))))))))))))))))))))))))))) AS "Client",
    1 as register                            
resident sale_basic_temp_1
where len(exclude_data_model) = 0 

;



Drop Table sale_basic_temp_1;
//exit script;

//sale Info--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//HU Refence
[hu_T]:
left keep(sale_basic_temp)
load distinct
    sale_service_id

resident sale_basic_temp
where sale_app_source = 'Zenith';


left join([hu_T])
LOAD Distinct

    sale_service_id,
    sale_HU_customer_reference as hu_reference,
    if(wildmatch(sale_HU_customer_reference,'GAAA*'),1,0) as eorder_flag,
    if(wildmatch(sale_HU_customer_reference,'GWG*'),1,0) as newcu_flag,
    IF(WildMatch(sale_HU_customer_reference, 'G18*','G1*','G2*','GAAA*','GWG*'), 'Vendor', 
        if(WildMatch(sale_HU_customer_reference,'95*','96*','97*','98*','99*') and match(len(sale_HU_customer_reference),6) or WildMatch(sale_HU_customer_reference,'10*','11*') and match(len(sale_HU_customer_reference),7),'Softlayer',
            if(WildMatch(sale_HU_customer_reference,'IBM*','HG*','VHE*') and WildMatch(sale_HU_customer_reference,'*D'),'Final Mile HU','Plant'))) as IsGNumber

FROM [lib://SCO-BI-Common Shared Data  Row/GEOFLOW_sale_HU.qvd] (qvd);


hu_mpo:
left keep(sale_basic_temp)
load distinct 
    sale_service_id,
    sale_service_customer_reference as "hu_reference" 

FROM [lib://SCO-BI-Common Shared Data  Transormed/Geoflow_Sale_Service_Transformed.qvd] (qvd)
where APP_Source = 'MPO'
and match(sale_contractor_party_Group_N1,'AMS_KEISER');

concatenate([hu_T])
load distinct
    *
resident hu_mpo;

drop table hu_mpo;



hu_llp:
left keep(sale_basic_temp)
load distinct
    sale_service_id,
    sale_service_HID_reference_10 as "hu_reference"
    
FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_Sale_Service_HID.qvd]
(qvd);

concatenate([hu_T])
load distinct
    *
resident hu_llp;

drop table hu_llp;



left join(sale_basic_temp)
load distinct
    *
resident hu_T;

drop table hu_T;


[specific_info]:
LEFT join ([sale_basic_temp])
LOAD DISTINCT
    sale_service_id,
    IBM_CUSTOMER_HAWB as sale_ibm_customer_hawb,
    IBM_IOT_Flag,
    IBM_Standard_Carrier_Alpha_Code,
    IBM_HAWB,
    IBM_Critical_Shipment,
    IBM_Transport_Mode,
    IF(LEN(IBM_HAWB) = 0, IBM_CUSTOMER_HAWB, IBM_HAWB) as ConsolidatedAWB,
    IBM_CUSTOMER_HAWB,
    IBM_Ship_From_Code,
    IBM_Ship_To_Code,
    IBM_Dispatch_Advice,
    IBM_TRACKING_NUMBER,
    if(IBM_Standard_Carrier_Alpha_Code = 'GFXX' or IBM_Ship_From_Code = 'GFXX' or IBM_Ship_To_Code = 'GFXX', 'GFXX') as GFXX_KU_flag

FROM [lib://SCO-BI-Common Shared Data  Row/GEOFLOW_Sale_Service_IBM.qvd] (qvd);

LEFT join ([sale_basic_temp])
LOAD distinct

    sale_service_id,
    Sale_Service_NEWCUS_Standard_Carrier_Alpha_Code as sale_service_NEWCUS_Standard_Carrier_Alpha_Code

FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_Sale_Service_NEWCUS.qvd]
(qvd);

left join(sale_basic_temp)
Load distinct

    sale_service_id,
    1 as sale_be_af_flag

FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_Sale_BE.qvd]
(qvd)where match(sale_event_code,'AF','E13');

left join(sale_basic_temp)
Load distinct

    sale_service_id,
    1 as sale_be_71_flag

FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_Sale_BE.qvd]
(qvd)where app_source = 'Zenith'
and match(sale_event_code,'71');

left join(sale_basic_temp)
Load distinct

    sale_service_id,
    1 as sale_be_d_flag

FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_Sale_BE.qvd]
(qvd)where match(sale_event_code,'D','X1','E21');

[sale_basic]:
LOAD
    *,
    if(sale_contractor_party_Group_N1='IBM_FIGO',
        if(sale_start_geo='AMS' and IsGNumber = 'Vendor','Vendor',
            if(sale_start_country='MX' and match(IBM_Ship_From_Code,'781Z1D'),'Appliances',
                if(sale_start_country='MX' and match(IBM_Ship_From_Code,'78175W','78175P'),'Power',
                    if(sale_start_country='MX'and match(IBM_Ship_From_Code,'78175P','7812D5','7812DB','7812DE','7812DM','7812DP','7812KC','7812KE','7812KX','7812KT','781935','781ZSP','7819SE'),'Storage',
                        if(sale_start_country='MX' and match(sale_start_zip_code,'JAL-45659','JAL-45619','JAL-45680'),'FIGO',
                            if(match(sale_start_zip_code,'AL-35824','WA-98032'),'Storage',
                                if(match(sale_start_zip_code,'WI-53719','WI-53701'),'Appliances',
                                    if(match(sale_start_zip_code,'KY-40219','KY-41018'),'SPO',
                                        if(sale_start_country='US' and len("hu_reference")=13 and WildMatch("hu_reference",'2*'),'FIGO',
                                            if(sale_start_country='MX' and not wildMatch(ConsolidatedAWB,'*GDL*'),'Storage',
                                                if(sale_end_zip_code='MN-55901','GARS',
                                                    if(match(sale_end_zip_code,'KY-40219','KY-41018'),'SPO',
                                                        if(sale_start_country='HU' and sale_start_zip_code='2600', 'Storage',
                                                            if(sale_start_country='NL' and sale_start_zip_code='5928 LR', 'SPO',
                                                                if(match(sale_start_zip_code,'NY-12601','MN-55901') and mid("hu_reference",7,2)='IC','GARS',
                                                                    if(match(sale_start_geo,'EMEA','APAC') and wildmatch(sale_service_start_name,'*GEODIS*','*IBM*','*CDC*'),'FIGO','Other'))))))))))))))))) as sale_ibm_brand,
                                                                      
    //KPIS--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    if(sale_service_execution_followup = 'CD','',
        if(sale_service_execution_followup = 'CL','',
            if(sale_planned_start_date < '$(vToday)',0,1))) as Due_Pickup_Kpi,

    if(sale_service_execution_followup = 'CL','',
        if(sale_planned_end_date < '$(vToday)',0,1)) as Due_Delivery_Kpi,

    if(match([sale_service_execution_followup],'APP'), 'On Going',if(sale_requested_start_date_after >= sale_actual_start_date,1,0)) as sale_start_date_kpi,//ojo aqui sale_requested_start_date_before > '$(vTodayDate)' and 
    if(match([sale_service_execution_followup],'CD','APP'), 'On Going',if(sale_requested_end_date >= sale_actual_end_date,1,0)) as sale_end_date_kpi, //sale_requested_start_date_before > '$(vTodayDate)' and 

    if(match([sale_service_execution_followup],'APP','PLANNED'),if(sale_planned_start_date >= '$(vToday)',1,0),if(sale_planned_start_date >= sale_actual_start_date,1,0)) as sale_planned_start_date_KPI,//ojo aqui sale_requested_start_date_before > '$(vTodayDate)' and 
    if(match([sale_service_execution_followup],'CD','APP','STARTED','PLANNED'), if(sale_planned_end_date >= '$(vToday)',1,0),if(sale_planned_end_date >= sale_actual_end_date,1,0)) as sale_planned_end_date_KPI, //sale_requested_start_date_before > '$(vTodayDate)' and 
    if(match(sale_contractor_party_Group_N1 & IBM_Ship_From_Code & left("hu_reference",3),'IBM_FIGOARBOMCA','IBM_FIGOARBOSSA')
        or match(sale_service_short_name,'IBM_MD_US/GSP','IBMMAFDXGSP/US','IBM_MD_US/GSP')
            or match(sale_contractor_party_Group_N1 & IBM_Ship_From_Code & left(sale_ibm_customer_hawb,4),'IBM_FIGOMCCG18DFORW','IBM_FIGOMCCG18DRETU'),1,0) as net_flag,
            
    if(sale_current_transit_time > 2 and match(sale_service_execution_followup,'CD','STARTED'),'+2 Future Delivery') as sale_plus2_future_delivery
    


resident [sale_basic_temp]
;






Drop Table  sale_basic_temp;
//drop field sale_be_71_flag_temp;
//Exit script;

//sale_buy ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




// sale vs buy
[sale-buy_temp]:
LEFT KEEP ([sale_basic])
LOAD DISTINCT
    sale_service_id,
    if(isnull(buy_service_id),'Missing',buy_service_id) AS buy_service_id,
    NbSaleServicesLeg,
    buy_amount_ht_YtdEur as "buy_eur_amount",
    sale_amount_ht_YtdEur as "sale_eur_amount",
    APP_Source

FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_Sale_Buy_Facts.qvd] (qvd);

left join([sale-buy_temp])
load distinct
    sale_service_id,
    sale_local_amount
resident sale_basic;



//buy ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//[buy]:
[buy_basic_temp]:
left KEEP([sale-buy_temp])
LOAD DISTINCT
    buy_service_id,
    buy_local_amount,
    buy_local_currency,
    Party_Short_Name_buy_executor_party AS buy_executor_short_name,
    buy_service_short_name as buy_service_short_name,
    buy_executor_party_Group_N1 as buy_executor_party_group_n1,
    if(Match(buy_executor_party_Group_N1,'DT','DC'),Party_Short_Name_buy_executor_party,buy_executor_party_Group_N1) as Carrier1,
    num(buy_weight_kg,'# ###.000','.',' ') as "buy_weight_kg",
    buy_executed_SLA as "buy_executed_SLA",
    buy_service_start_name as buy_start_name,
    buy_start_country as "buy_start_country",
    buy_start_zone as "buy_start_zip_code",
    SubField(buy_start_zone, '-', 1) as buy_start_state,
    buy_end_country as "buy_end_country",
    buy_start_city as "buy_start_city",
    buy_end_city as "buy_end_city",
    buy_end_zone as "buy_end_zip_code",
     SubField(buy_end_zone, '-', 1) as buy_end_state,
    buy_service_start_address as buy_start_addres,
    buy_service_end_address as buy_end_addres,
    buy_service_execution_followup,
    buy_actual_start_date as "buy_actual_start_date",
    buy_actual_end_date as buy_actual_end_date,
    buy_creation_date as buy_creation_date,
    if(buy_service_execution_followup='   ',buy_planned_end_date_before,buy_actual_end_date) as buy_start_date,
    if(match(buy_service_execution_followup,'CL','FINISHED'),buy_actual_end_date,buy_planned_end_date_before) as buy_end_date,
    APP_Source as buy_app_source,
    buy_service_end_name as buy_end_name,
    buy_service_nature as buy_service_nature,
    buy_service_invoice_bursting as buy_invoice_bursting,
    buy_service_external_reference as buy_external_reference,
    buy_planned_start_date_before,
    buy_requested_start_date_after,
    buy_requested_end_date_after,
    buy_planned_end_date_before,
    if(buy_actual_start_date <= buy_planned_start_date_before,1,0) as buy_kpi_on_time_pickup,
    if(buy_actual_end_date <= buy_planned_end_date_before,1,0) as buy_kpi_on_time_delivery,
    if(buy_weight_kg <= 100, '0-100 kgs',
        if(buy_weight_kg <= 200, '100-200 kgs',
            if(buy_weight_kg <= 300, '200-300 kgs',
                if(buy_weight_kg <= 400, '300-400 kgs',
                    if(buy_weight_kg <= 1000, '500-1000kgs',
                        if(buy_weight_kg <= 2000, '1000-2000 kgs',
                            if(buy_weight_kg <= 3000, '2000-3000 kgs',
                                if(buy_weight_kg <= 4000, '3000-4000 kgs',
                                    if(buy_weight_kg <= 10000,'5000 - 10000 kgs','+10000 kgs'))))))))) as buy_weight_bracket
    
FROM [lib://SCO-BI-Common Shared Data  Transormed/Geoflow_Buy_Service_Transformed.qvd] (qvd);

//sale-buy -----------------------------------------------------------------------------



LEFT join ([sale-buy_temp])
LOAD DISTINCT
   buy_service_id,
   buy_service_id as buy_service_id2,
   buy_local_amount

resident buy_basic_temp;  

drop field buy_service_id from [sale-buy_temp];

[sale-buy]:
noconcatenate
LOAD DISTINCT
   sale_service_id,
   buy_service_id2 as buy_service_id,
   if(APP_Source = 'MPO',buy_local_amount * 1.2135,buy_eur_amount) as buy_eur_amount,
   if(APP_Source = 'MPO',sale_local_amount * 1.2135,sale_eur_amount) as sale_eur_amount

resident [sale-buy_temp] 
where len(trim(buy_service_id2)) > 2;

drop table [sale-buy_temp];

//------------------------------------------------------------------------------------------------


left join(buy_basic_temp)
Load distinct

    buy_service_id,
    1 as buy_be_71_flag_temp

FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_Buy_BE.qvd]
(qvd)where app_source = 'Zenith'
and match(buy_event_code,'71');



sale_cw:
left join(sale_basic)
LOAD distinct
    CSO as sale_service_id,
    round("CSO Chargeable Weight") as sale_finance_cw,
    [CSO Status] as sale_finance_status,
    [CSO Invoice] as sale_fa_invoice
    
FROM [lib://Geo_AMS/LogisticsAnalyst/Plugins/App_Connexion/Finance_input_2.0.csv]
(txt, utf8, embedded labels, delimiter is ',', msq);


//loading number

saleloading:
left join(sale_basic)
LOAD
    sale_service_id,
    sale_service_loading_number as sale_loading_number,
    sale_service_invoice_bursting

   
FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_Sale_Service.qvd]
(qvd);


//buy Info-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

// buy basic information
[buy_basic]:
noconcatenate
LOAD DISTINCT
    *,
    if(match(Carrier1,'GEOWILARMD','GEOWILIL'),'GEODIS FF',
        if(match(Carrier1,'CRST_US'),'CRST',
            if(match(Carrier1,'CC_CARRIER_FEDEX'), 'FEDEX',
            if(wildmatch(Carrier1,'AIT*'),'AIT',Carrier1)))) as Carrier,
    
    if((NetWorkDays((buy_actual_start_date),(buy_actual_end_date))-1) < 0,0,(NetWorkDays((buy_actual_start_date),(buy_actual_end_date))-1)) as buy_transit_time,
    if(buy_be_71_flag_temp = 1,1,0) as buy_be_71_flag


resident buy_basic_temp
where (not match(buy_service_execution_followup,'EPU')
and not match(Carrier1,'SILKEY','TNT','AXAINSU_MX')
)
or
(
buy_app_source = 'MPO')
;

Drop Table buy_basic_temp;
drop field buy_be_71_flag_temp;

drop field Carrier1;

BE_MAWB:
left join(buy_basic)
LOAD

    buy_service_id,
    buy_BE_MAWB_number

FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_Buy_BE_MAWB.qvd]
(qvd);

geo_origin_buy:
left join(buy_basic)
LOAD
    country as "buy_start_country",
    Geo_Code as "buy_start_geo"
FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_REF_country.qvd]
(qvd) ;

geo_end_buy:
left join(buy_basic)
LOAD
    country as "buy_end_country",
    Geo_Code as "buy_end_geo"
FROM [lib://SCO-BI-Common Shared Data  Row/Geoflow_REF_country.qvd]
(qvd) ;


$(Must_Include=[lib://Geo_AMS/Automation/BI/Plugins/26. sale_finance_service_tariff_items.qvs]);
$(Must_Include=[lib://Geo_AMS/Automation/BI/Plugins/Control Points/4. Amount.qvs]);


//---------------------------------------------------------------------------------------------
truck_manual_input:
NoConcatenate
LOAD
    "Date" as truck_date,
    Carrier as truck_carrier,
    "Shift #" as truck_shift,
    "No. of Trucks" as truck_no_of_trucks,
    "No. of Pallets" as truck_no_of_pallets,
    "No. of Cages" as truck_no_of_cages,
    "No. of Boxes" as truck_no_of_boxes,
    "No. of Frames" as truck_no_of_frames,
    "Unload Time (mins)" as truck_no_of_unload_time
FROM [lib://Geo_AMS/POK_WH/Trucking log.xlsm]
(ooxml, embedded labels, table is [Trucking log]);


Empire:
//left keep(hu_items)
LOAD
    "ORDER NUMBER" as empire_order_number,
    COATS as sale_COAT,
    "MACHINE TYPE" as empire_machine_type,
    CUSTOMER as empire_customer,
    "PIECE COUNT" as empire_piece_count,
    "FRAME COUNT" as empire_frame_count,
    STATUS as empire_status,
    "DATE STAGED" as empire_date_staged,
    "DATE RETURNED" as empire_date_returned,
    "DATE SHIPPED" as empire_date_shipped,
    "CANCELLED/ALTERED" as empire_cancelled_altered
FROM [lib://Geo_AMS/POK_WH/Empire Combined Forward Stage EOD.xlsx]
(ooxml, embedded labels, table is Dash);


empire_truck:
LOAD
WAREHOUSE as empire_truckWAREHOUSE,
ARRIVALID as empire_truckARRIVALID,
ARRIVALTYPE as empire_truckARRIVALTYPE,
FIRSTNAME as empire_truckFIRSTNAME,
NAME as empire_truckNAME,
PHONENUMBER as empire_truckPHONENUMBER,
LP1 as empire_truckLP1,
LP2 as empire_truckLP2,
SELECTEDCARRIER as empire_truckSELECTEDCARRIER,
SELECTEDSUPPLIER as empire_truckSELECTEDSUPPLIER,
SELECTEDSHIPTO as empire_truckSELECTEDSHIPTO,
SELECTEDORDERS as empire_truckSELECTEDORDERS,
ARRIVALDATE as empire_truckARRIVALDATE,
ARRIVALTIME as empire_truckARRIVALTIME,
APPOINTMENTDATE as empire_truckAPPOINTMENTDATE,
APPOINTMENTTIME as empire_truckAPPOINTMENTTIME,
STATUS as empire_truckSTATUS,
COMPANY as empire_truckCOMPANY,
NBPALLETS as empire_truckNBPALLETS,
NBPARCELS as empire_truckNBPARCELS,
NBMIXEDPALLETS as empire_truckNBMIXEDPALLETS,
NBOTHERS as empire_truckNBOTHERS,
TRUCKTYPE as empire_truckTRUCKTYPE,
UPDATEDATE as empire_truckUPDATEDATE,
UPDATETIME as empire_truckUPDATETIME,
UPDATEUSER as empire_truckUPDATEUSER

FROM [lib://Geo_AMS/POK_WH/Trucking Empire.xlsx]
(ooxml, embedded labels, table is XDI_TRUCK);